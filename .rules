# Project Intelligence: Deno Deploy Plugin Integration

## Critical Implementation Paths
1. Plugin Deployment CI Pipeline:
   Checkout → Fix Imports → Bundle → Deploy
2. Import Fixing Process:
   Find TS files → Transform imports → Delete backups
3. Deployment Verification:
   Workflow status → Log analysis → URL testing

## User Workflow Preferences
- Prefers CLI tools over UI for CI management
- Requires detailed error logging for debugging
- Values separation between project and plugins
- Prefers atomic commits for CI changes

## Project-Specific Patterns
### Plugin Integration
- Plugins are always included as git submodules
- Use npm: specifiers for Deno compatibility
- Create deno.json for configuration
- Never modify plugin source code directly
- Direct imports are better than bundling

### CI Pipeline
- Use `gh` CLI for workflow management
- Include verification steps after key operations
- Auto-generate project names with branch info
- Use `deployctl` for Deno Deploy operations
- Configure Deno with deno.json

### Error Handling
- Check logs for "Module not found" errors
- Verify submodule checkout success
- Use npm: specifiers for missing modules
- Monitor deployment status via `gh run watch`
- Enable nodeModulesDir for npm packages

## Tool Usage Patterns
- Use npm: specifiers for npm packages
- Use node: specifiers for Node.js built-ins
- Configure deno.json for compatibility
- Use `gh run rerun` to retry workflows
- Use `gh run view --log-failed` for diagnostics

## Important Decisions
1. Use Deno's native Node.js compatibility
2. Prefer npm: specifiers over bundling
3. Configure deno.json with unstable features
4. Preserve plugin source integrity
5. Use temporary directories for env files
6. Direct imports are simpler than bundling

## Key Learnings
1. Deno v2 has excellent Node.js compatibility
2. npm: specifiers eliminate most issues
3. nodeModulesDir enables npm package usage
4. Unstable features provide needed flexibility
5. Direct imports are simpler than bundling
6. deno.json configuration is crucial

## Rules of Thumb
- When import errors occur: use npm: specifiers
- When deployment fails: check deno.json config
- When submodules fail: ensure recursive checkout
- When env vars missing: check filtering script
- When project creation fails: verify org permissions
- When modules not found: enable nodeModulesDir
